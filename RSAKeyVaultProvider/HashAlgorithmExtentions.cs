using System;
using System.Security.Cryptography;

namespace Microsoft.Azure.KeyVault
{
    public static class HashAlgorithmExtentions
    {
        const int SHA1_SIZE = 20;
        const int SHA256_SIZE = 32;
        const int SHA384_SIZE = 48;
        const int SHA512_SIZE = 64;

        #region SHA Digest

        //http://www.ietf.org/rfc/rfc3447.txt

        readonly static byte[] sha1Digest = new byte[] { 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        readonly static byte[] sha256Digest = new byte[] { 0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        readonly static byte[] sha384Digest = new byte[] { 0x30, 0x41, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
        readonly static byte[] sha512Digest = new byte[] { 0x30, 0x51, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        #endregion

        public static HashAlgorithm Create(this HashAlgorithmName algorithm)
        {
            if (algorithm == HashAlgorithmName.SHA1)
                return SHA1.Create();

            if (algorithm == HashAlgorithmName.SHA256)
                return SHA256.Create();

            if (algorithm == HashAlgorithmName.SHA384)
                return SHA384.Create();

            if (algorithm == HashAlgorithmName.SHA512)
                return SHA512.Create();

            throw new NotSupportedException("The specified algorithm is not supported.");
        }

        public static int DigestSize(this HashAlgorithmName algorithm)
        {
            if (algorithm == HashAlgorithmName.SHA1)
                return SHA1_SIZE;

            if (algorithm == HashAlgorithmName.SHA256)
                return SHA256_SIZE;

            if (algorithm == HashAlgorithmName.SHA384)
                return SHA384_SIZE;

            if (algorithm == HashAlgorithmName.SHA512)
                return SHA512_SIZE;

            throw new NotSupportedException("The specified algorithm is not supported.");
        }

        public static byte[] DigestValue(this HashAlgorithmName algorithm)
        {
            if (algorithm == HashAlgorithmName.SHA1)
                return sha1Digest;

            if (algorithm == HashAlgorithmName.SHA256)
                return sha256Digest;

            if (algorithm == HashAlgorithmName.SHA384)
                return sha384Digest;

            if (algorithm == HashAlgorithmName.SHA512)
                return sha512Digest;

            throw new NotSupportedException("The specified algorithm is not supported.");
        }
    }
}
